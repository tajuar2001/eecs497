{"ast":null,"code":"var _jsxFileName = \"/home/tajuarb/Coding/newLeaf/frontend/src/components/resources/components/ParksPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './css/parksPage.css';\nimport { GOOGLE_MAPS_API_KEY } from './mapsAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ParksPage({\n  onBackClick\n}) {\n  _s();\n  const [userLocation, setUserLocation] = useState(null);\n  useEffect(() => {\n    const getUserLocation = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const location = {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          };\n          setUserLocation(location);\n        }, error => {\n          console.error('Error getting user location:', error);\n          // Fallback to default location if user location is not available\n          setUserLocation({\n            lat: 37.7749,\n            lng: -122.4194\n          }); // Default coordinates (e.g., San Francisco)\n        });\n      } else {\n        console.error('Geolocation is not supported by this browser.');\n        // Fallback to default location if geolocation is not supported\n        setUserLocation({\n          lat: 37.7749,\n          lng: -122.4194\n        }); // Default coordinates (e.g., San Francisco)\n      }\n    };\n    getUserLocation();\n  }, []);\n  useEffect(() => {\n    if (userLocation) {\n      // Once userLocation is available, load the map with the user's location-based search for parks\n      const mapContainer = document.getElementById('map-container');\n      if (mapContainer) {\n        mapContainer.innerHTML = `<iframe\n          title=\"Google Map\"\n          className=\"map-container\"\n          width=\"600\"\n          height=\"450\"\n          loading=\"lazy\"\n          allowFullScreen\n          src=\"https://www.google.com/maps/embed/v1/search?key=${GOOGLE_MAPS_API_KEY}&q=parks+near+${userLocation.lat},${userLocation.lng}\"\n        ></iframe>`;\n      }\n    }\n  }, [userLocation]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"parks-page-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Parks Guide\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"back-button\",\n      onClick: onBackClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(ParksPage, \"Y9fzOV/Xjvhq8GrZ1rcFtHinZdA=\");\n_c = ParksPage;\nexport default ParksPage;\nvar _c;\n$RefreshReg$(_c, \"ParksPage\");","map":{"version":3,"names":["React","useEffect","useRef","useState","GOOGLE_MAPS_API_KEY","jsxDEV","_jsxDEV","ParksPage","onBackClick","_s","userLocation","setUserLocation","getUserLocation","navigator","geolocation","getCurrentPosition","position","location","lat","coords","latitude","lng","longitude","error","console","mapContainer","document","getElementById","innerHTML","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","onClick","_c","$RefreshReg$"],"sources":["/home/tajuarb/Coding/newLeaf/frontend/src/components/resources/components/ParksPage.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './css/parksPage.css';\nimport { GOOGLE_MAPS_API_KEY } from './mapsAPI';\n\nfunction ParksPage({ onBackClick }) {\n  const [userLocation, setUserLocation] = useState(null);\n\n  useEffect(() => {\n    const getUserLocation = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            const location = {\n              lat: position.coords.latitude,\n              lng: position.coords.longitude,\n            };\n            setUserLocation(location);\n          },\n          (error) => {\n            console.error('Error getting user location:', error);\n            // Fallback to default location if user location is not available\n            setUserLocation({ lat: 37.7749, lng: -122.4194 }); // Default coordinates (e.g., San Francisco)\n          }\n        );\n      } else {\n        console.error('Geolocation is not supported by this browser.');\n        // Fallback to default location if geolocation is not supported\n        setUserLocation({ lat: 37.7749, lng: -122.4194 }); // Default coordinates (e.g., San Francisco)\n      }\n    };\n\n    getUserLocation();\n  }, []);\n\n  useEffect(() => {\n    if (userLocation) {\n      // Once userLocation is available, load the map with the user's location-based search for parks\n      const mapContainer = document.getElementById('map-container');\n      if (mapContainer) {\n        mapContainer.innerHTML = `<iframe\n          title=\"Google Map\"\n          className=\"map-container\"\n          width=\"600\"\n          height=\"450\"\n          loading=\"lazy\"\n          allowFullScreen\n          src=\"https://www.google.com/maps/embed/v1/search?key=${GOOGLE_MAPS_API_KEY}&q=parks+near+${userLocation.lat},${userLocation.lng}\"\n        ></iframe>`;\n      }\n    }\n  }, [userLocation]);\n\n  return (\n    <div className=\"parks-page-container\">\n      <h2>Parks Guide</h2>\n      <div id=\"map-container\"></div>\n      <button className=\"back-button\" onClick={onBackClick}></button>\n    </div>\n  );\n}\n\nexport default ParksPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,qBAAqB;AAC5B,SAASC,mBAAmB,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,SAASC,SAASA,CAAC;EAAEC;AAAY,CAAC,EAAE;EAAAC,EAAA;EAClC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAEtDF,SAAS,CAAC,MAAM;IACd,MAAMW,eAAe,GAAGA,CAAA,KAAM;MAC5B,IAAIC,SAAS,CAACC,WAAW,EAAE;QACzBD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACrCC,QAAQ,IAAK;UACZ,MAAMC,QAAQ,GAAG;YACfC,GAAG,EAAEF,QAAQ,CAACG,MAAM,CAACC,QAAQ;YAC7BC,GAAG,EAAEL,QAAQ,CAACG,MAAM,CAACG;UACvB,CAAC;UACDX,eAAe,CAACM,QAAQ,CAAC;QAC3B,CAAC,EACAM,KAAK,IAAK;UACTC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;UACpD;UACAZ,eAAe,CAAC;YAAEO,GAAG,EAAE,OAAO;YAAEG,GAAG,EAAE,CAAC;UAAS,CAAC,CAAC,CAAC,CAAC;QACrD,CACF,CAAC;MACH,CAAC,MAAM;QACLG,OAAO,CAACD,KAAK,CAAC,+CAA+C,CAAC;QAC9D;QACAZ,eAAe,CAAC;UAAEO,GAAG,EAAE,OAAO;UAAEG,GAAG,EAAE,CAAC;QAAS,CAAC,CAAC,CAAC,CAAC;MACrD;IACF,CAAC;IAEDT,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAENX,SAAS,CAAC,MAAM;IACd,IAAIS,YAAY,EAAE;MAChB;MACA,MAAMe,YAAY,GAAGC,QAAQ,CAACC,cAAc,CAAC,eAAe,CAAC;MAC7D,IAAIF,YAAY,EAAE;QAChBA,YAAY,CAACG,SAAS,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiExB,mBAAoB,iBAAgBM,YAAY,CAACQ,GAAI,IAAGR,YAAY,CAACW,GAAI;AAC1I,mBAAmB;MACb;IACF;EACF,CAAC,EAAE,CAACX,YAAY,CAAC,CAAC;EAElB,oBACEJ,OAAA;IAAKuB,SAAS,EAAC,sBAAsB;IAAAC,QAAA,gBACnCxB,OAAA;MAAAwB,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpB5B,OAAA;MAAK6B,EAAE,EAAC;IAAe;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAC9B5B,OAAA;MAAQuB,SAAS,EAAC,aAAa;MAACO,OAAO,EAAE5B;IAAY;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5D,CAAC;AAEV;AAACzB,EAAA,CAvDQF,SAAS;AAAA8B,EAAA,GAAT9B,SAAS;AAyDlB,eAAeA,SAAS;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}